{"version":3,"sources":["Card.js","CardList.js","InputBox.js","Winner.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","id2","onButtonFlip","name","className","onClick","alt","src","CardList","robots","map","record","i","key","username","InputBox","InputChange","onButtonRestart","type","placeholder","onChange","Winner","handleClick","props","toggle","this","Component","App","togglePop","setState","seen","state","onInputChange","event","inputbox","target","value","catsleft","Number","window","location","reload","document","getElementById","getAttribute","includes","setAttribute","prevCard","a","Promise","r","setTimeout","check2Cards","then","res","fetch","response","json","users","shuffleArray","array","length","j","Math","floor","random","filteredCats","reduce","x","push","y","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e502ef1e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({id, id2, name, onButtonFlip}) => {\r\n\treturn (\r\n\t\t<div className=\"flip-container dib br3 ma2 grow bw2 shadow-5 tc\"\r\n\t\t\tonClick = {() => onButtonFlip(id, id2)}\r\n\t\t\tid={id}\r\n\t\t\tid2={id2}\r\n\t\t>\r\n\t\t\t<div className=\"flipper\">\r\n\t\t\t\t<div className=\"front\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<div className = 'shirt ba bw4 br3 b--white-80 tc'>\r\n\t\t\t\t\t\t</div> \r\n\t\t\t\t\t</div>\t\t\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"back\">\r\n\t\t\t\t\t<div className = 'ph0 pv3 tc'>\r\n\t\t\t\t\t\t<img alt = 'Cat' src={`https://robohash.org/${id2}?set=set4&size=150x150`} /> \r\n\t\t\t\t\t</div>\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots, onButtonFlip }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robots.map((record, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\tkey={i} \r\n\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\tid2={robots[i].id2}\r\n\t\t\t\t\tname={robots[i].username}\r\n\t\t\t\t\tonButtonFlip={onButtonFlip}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList","import React from 'react';\r\n\r\nconst InputBox = ({InputChange, onButtonRestart}) => {\r\n\treturn (\r\n\t\t<div className = 'pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName = 'pa3 ba bw1 shadow-5 br3 b--blue bg-lightest-blue'\r\n\t\t\t\ttype='filter' \r\n\t\t\t\tplaceholder='quantity of cats' \r\n\t\t\t\tonChange={InputChange}\r\n\t\t\t/>\r\n\t\t\t<div className = 'pa1'></div>\r\n\t\t\t<button \r\n\t\t\t\tclassName = 'pa1 grow ba bw1 shadow-5 br3 b--blue bg-lightest-blue'\r\n\t\t\t\tonClick = {onButtonRestart}\r\n\t\t\t>Restart</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default InputBox;","import React, { Component } from \"react\";\r\n\r\nexport default class Winner extends Component {\r\n  handleClick = () => {\r\n   this.props.toggle();\r\n  };\r\nrender() {\r\n  return (\r\n   <div className=\"modal\">\r\n     <div className=\"modal_content\">\r\n     <span className=\"close\" onClick={this.handleClick}>&times;    </span>\r\n     <h1>Congratulations!</h1>\r\n     <p>You won!</p>\r\n    </div>\r\n   </div>\r\n  );\r\n }\r\n}","import React, { Component } from 'react';\r\nimport CardList from './CardList'\r\nimport InputBox from './InputBox'\r\nimport Winner from './Winner'\r\n\r\nclass App extends Component {\r\n\tconstructor () {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tinputbox: 10,\r\n\t\t\tseen: false\r\n\t\t};\r\n\t\tthis.i = 0;\r\n\t\tthis.prevCard=null;\r\n\t\tthis.catsleft = 10;\r\n\t}\r\n\r\n\t  togglePop = () => {\r\n\t   this.setState({\r\n\t    seen: !this.state.seen\r\n\t   });\r\n\t  };\r\n\tcomponentDidMount () {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(users=> this.setState({robots:users}));\r\n\t}\r\n\r\n\tonInputChange = (event) => {\r\n\t\tthis.setState({inputbox:event.target.value});\r\n\t\tthis.catsleft = Number(event.target.value);\r\n\t\t// console.log('catsleft',this.catsleft);\r\n\t}\r\n\r\n\tonButtonRestart = () => {\r\n\t\t// this.setState({inputbox:this.state.inputbox});\r\n\t\twindow.location.reload();\r\n\t}\r\n\r\n\tonButtonFlip = (id,id2) => {\r\n\t\tif (this.i !== 2) {\r\n\t\t\t// console.log(id,id2, this.prevCard);\r\n\t\t\tif (!document.getElementById(id).getAttribute('class').includes('hover')) {\r\n\t\t\t\tdocument.getElementById(id).setAttribute('class','flip-container hover dib br3 ma2 grow bw2 shadow-5 tc');\r\n\t\t\t\tthis.i++;\r\n\t\t\t}\r\n\t\t\tif (this.i === 2) {\r\n\t\t\t\tconst check2Cards = async function (prevCard) {\r\n\t\t\t\t\t// console.log('start await');\r\n\t\t\t\t\tawait new Promise(r => setTimeout(r, 2000));\r\n\t\t\t\t\t// console.log('doing');\r\n\t\t\t\t\tif (prevCard.getAttribute('id2') == id2) {\r\n\t\t\t\t\t\t// console.log('match')\r\n\t\t\t\t\t\tdocument.getElementById(id2).setAttribute('class','flip-container hide hover dib br3 ma2 grow bw2 shadow-5 tc');\r\n\t\t\t\t\t\tdocument.getElementById(id2+'_clone').setAttribute('class','flip-container hide hover dib br3 ma2 grow bw2 shadow-5 tc');\r\n\t\t\t\t\t\treturn [0,-1];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// console.log('notmatch')\r\n\t\t\t\t\t\tprevCard.setAttribute('class','flip-container dib br3 ma2 grow bw2 shadow-5 tc');\r\n\t\t\t\t\t\tdocument.getElementById(id).setAttribute('class','flip-container dib br3 ma2 grow bw2 shadow-5 tc');\r\n\t\t\t\t\t\treturn [0,0];\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tcheck2Cards(this.prevCard)\r\n\t\t\t\t\t.then((res) => {\r\n\t\t\t\t\t\tthis.i = res[0];\r\n\t\t\t\t\t\tthis.catsleft += res[1];\r\n\t\t\t\t\t\t// console.log('i=', this.i,'new catsleft', this.catsleft);\r\n\t\t\t\t\t\tif (this.catsleft == 0) {\r\n\t\t\t\t\t\t\t// window.alert('you won!!!')\r\n\t\t\t\t\t\t\tthis.togglePop()\r\n\t\t\t\t\t\t\t// window.location.reload();\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t// console.log(this.i);\r\n\t\t\tthis.prevCard = document.getElementById(id);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tfunction shuffleArray(array) {\r\n\t    for (let i = array.length - 1; i > 0; i--) {\r\n\t      const j = Math.floor(Math.random() * (i + 1));\r\n\t      [array[i], array[j]] = [array[j], array[i]];\r\n\t    }\r\n\t   \treturn array;\r\n\t\t}\r\n\r\n\t\tconst filteredCats = shuffleArray(shuffleArray(this.state.robots).reduce((res,x) => {\r\n\t\t\tif (res.length < (this.state.inputbox*2)) {\r\n\t\t\t\tx['id2']=x['id']\r\n\t\t\t\tres.push(x);\r\n\t\t\t\tlet y = {...x}\r\n\t\t\t\ty['id']=y['id']+'_clone'\r\n\t\t\t\tres.push(y);\r\n\t\t\t}\r\n\t\t\treturn res;\r\n\t\t},[]));\r\n\r\n\t\tif (!this.state.robots.length) {\r\n\t\t\treturn <h1 className = 'f1 tc'>Loading...</h1>\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div className = 'tc'>\r\n\t\t\t\t\t<h1>Kittens Game</h1>\r\n\t\t\t\t\t<InputBox \r\n\t\t\t\t\t\tInputChange = {this.onInputChange}\r\n\t\t\t\t\t\tonButtonRestart = {this.onButtonRestart}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{this.state.seen ? <Winner toggle={this.togglePop} /> : null}\r\n\t\t\t\t\t<CardList \r\n\t\t\t\t\t\trobots = {filteredCats}\r\n\t\t\t\t\t\tonButtonFlip = {this.onButtonFlip}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render(\r\n\t<App />\r\n\t, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}